import streamlit as st
import requests
import uuid
import pandas as pd
import json
import time  # <-- NEW

# ========= –ö–û–ù–§–ò–ì =========
N8N_URL = "https://finally.app.n8n.cloud/webhook/bf4dd093-bb02-472c-9454-7ab9af97bd1d"
TIMEOUT = (10, 240)  # connect=10s, read=240s (4 –º–∏–Ω—É—Ç—ã)
SESSION_TTL_SEC = 3600  # <-- NEW: TTL 1 —á–∞—Å

st.set_page_config(page_title="Analitical Agent", layout="wide")

# ========= –°–ï–°–°–ò–Ø =========
def reset_chat():
    st.session_state.session_id = str(uuid.uuid4())
    st.session_state.messages = [{"role": "assistant", "content": "Whom are we firing today?"}]
    st.session_state.session_started_at = time.time()
    st.session_state.last_interaction = time.time()

if "session_id" not in st.session_state:
    reset_chat()
if "session_started_at" not in st.session_state:
    st.session_state.session_started_at = time.time()
if "last_interaction" not in st.session_state:
    st.session_state.last_interaction = time.time()

# ---- –ê–í–¢–û-–°–ë–†–û–° –ü–û TTL ----
now = time.time()
if now - st.session_state.last_interaction > SESSION_TTL_SEC:
    reset_chat()
    st.toast("–ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥: —Å–µ—Å—Å–∏—è –±—ã–ª–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ > 1 —á–∞—Å–∞.", icon="üßπ")

# –ö–Ω–æ–ø–∫–∞ —Ä—É—á–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞
st.sidebar.button("üßπ –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥", on_click=reset_chat)
st.sidebar.caption(f"–°–µ—Å—Å–∏—è: {st.session_state.session_id[:8]}‚Ä¶  ‚Ä¢ TTL: {SESSION_TTL_SEC//60} –º–∏–Ω")

# ========= –£–¢–ò–õ–ò–¢–´ =========
def _dig_for_output(obj):
    """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–π dict —Å –∫–ª—é—á–æ–º 'output' –≤ –ª—é–±—ã—Ö –æ–±—ë—Ä—Ç–∫–∞—Ö/–º–∞—Å—Å–∏–≤–∞—Ö/—Å—Ç—Ä–æ–∫–∞—Ö."""
    if isinstance(obj, dict):
        if "output" in obj and isinstance(obj["output"], dict):
            return obj["output"]
        for k in ("json", "data", "body", "result", "response"):
            if k in obj:
                got = _dig_for_output(obj[k])
                if got is not None:
                    return got
        for v in obj.values():
            got = _dig_for_output(v)
            if got is not None:
                return got
    elif isinstance(obj, list):
        for el in obj:
            got = _dig_for_output(el)
            if got is not None:
                return got
    elif isinstance(obj, str):
        s = obj.strip()
        if s.startswith("```"):
            s = s.replace("```json", "").replace("```JSON", "").replace("```", "").strip()
        try:
            return _dig_for_output(json.loads(s))
        except Exception:
            pass
    return None

def parse_n8n_response(response_json):
    """–û–∂–∏–¥–∞–µ–º {'output': {'analytical_report': str, 'chart_data': null|{...}}}"""
    try:
        out = _dig_for_output(response_json)
        if not isinstance(out, dict):
            return {"text": "–ù–µ –Ω–∞–π–¥–µ–Ω –∫–ª—é—á 'output' –≤ –æ—Ç–≤–µ—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞.", "chart": None}

        # NEW: –µ—Å–ª–∏ –ø—Ä–∏–ª–µ—Ç–µ–ª–æ {"output":{"output":{...}}} ‚Äî —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –¥–æ –ª–∏—Å—Ç–∞
        while isinstance(out, dict) and "output" in out and isinstance(out["output"], dict):
            out = out["output"]

        text = out.get("analytical_report", "–û—Ç—á—ë—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
        chart = out.get("chart_data", None)
        return {"text": text, "chart": chart}
    except Exception as e:
        return {"text": f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}\n–°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç: {response_json}", "chart": None}


def ask_agent(prompt: str) -> dict:
    headers = {"x-session-id": st.session_state.session_id}
    payload = {"prompt": prompt, "sessionId": st.session_state.session_id}
    try:
        r = requests.post(N8N_URL, json=payload, headers=headers, timeout=TIMEOUT)
        r.raise_for_status()
        return parse_n8n_response(r.json())
    except requests.exceptions.RequestException as e:
        return {"text": f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è/—Ç–∞–π–º–∞—É—Ç–∞: {e}", "chart": None}
    except Exception as e:
        return {"text": f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", "chart": None}

def _to_numeric_series(s: pd.Series) -> pd.Series:
    return (
        s.astype(str)
         .str.replace("\u00A0", "", regex=False)  # NBSP
         .str.replace("%", "", regex=False)
         .str.replace(" ", "", regex=False)
         .str.replace(",", ".", regex=False)
         .pipe(pd.to_numeric, errors="coerce")
    )

def _norm_key(s: str) -> str:
    return str(s).replace("\u00A0", " ").strip().lower()

def show_chart(spec: dict):
    """–†–µ–Ω–¥–µ—Ä bar/line –Ω–∞ –æ—Å–Ω–æ–≤–µ chart_data (–Ω–∞—Ç–∏–≤–Ω—ã–µ Streamlit-—á–∞—Ä—Ç—ã)."""
    if not spec:
        return
    data = spec.get("data")
    x_key = spec.get("x_column")
    y_key = spec.get("y_column")
    ctype = (spec.get("type") or "bar_chart").lower()

    if not (data and x_key and y_key):
        st.error("chart_data –Ω–µ–ø–æ–ª–Ω—ã–π (–Ω—É–∂–Ω—ã data/x_column/y_column).")
        return

    df = pd.DataFrame([data]) if isinstance(data, dict) else pd.DataFrame(data)
    cmap = {_norm_key(c): c for c in df.columns}
    x_col = cmap.get(_norm_key(x_key))
    y_col = cmap.get(_norm_key(y_key))
    if not x_col or not y_col:
        st.error(f"–ö–æ–ª–æ–Ω–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –û–∂–∏–¥–∞–ª–∏—Å—å '{x_key}' –∏ '{y_key}'.")
        st.write("columns:", list(df.columns))
        return

    df = df[[x_col, y_col]].rename(columns={x_col: x_key, y_col: y_key})
    df[y_key] = _to_numeric_series(df[y_key])
    df = df.dropna(subset=[y_key])
    if df.empty:
        st.info("–ì—Ä–∞—Ñ–∏–∫ –Ω–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω: –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ —á–∏—Å–µ–ª –¥–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã–µ.")
        return

    sort_by_y = spec.get("sort_by_y")  # "asc" | "desc" | None
    if sort_by_y == "asc":
        df = df.sort_values(y_key, ascending=True)
    elif sort_by_y == "desc":
        df = df.sort_values(y_key, ascending=False)

    if ctype == "line_chart":
        st.line_chart(df, x=x_key, y=y_key, width="stretch", height="content")
    else:
        st.bar_chart(
            df,
            x=x_key,
            y=y_key,
            horizontal=bool(spec.get("horizontal", False)),
            sort=spec.get("sort", True),
            stack=spec.get("stack", None),
            use_container_width=True,
            height=420,
        )

# ========= –†–ï–ù–î–ï–† –ò–°–¢–û–†–ò–ò =========
for msg in st.session_state.messages:
    with st.chat_message(msg["role"]):
        st.markdown(msg["content"])
        if msg.get("chart"):
            show_chart(msg["chart"])

# ========= –í–í–û–î –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø =========
if prompt := st.chat_input("–í–∞—à –≤–æ–ø—Ä–æ—Å..."):
    st.session_state.last_interaction = time.time()  # <-- –æ–±–Ω–æ–≤–ª—è–µ–º TTL –ø—Ä–∏ –≤–≤–æ–¥–µ
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)

    resp = ask_agent(prompt)
    text = resp.get("text", "_–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –∞–≥–µ–Ω—Ç–∞_")
    chart = resp.get("chart")

    with st.chat_message("assistant"):
        st.markdown(text)
        if chart:
            show_chart(chart)
        else:
            st.info("–ì—Ä–∞—Ñ–∏–∫ –Ω–µ –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω: –∞–≥–µ–Ω—Ç –Ω–µ –≤–µ—Ä–Ω—É–ª chart_data –¥–ª—è —ç—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.")

    st.session_state.messages.append({"role": "assistant", "content": text, "chart": chart})
