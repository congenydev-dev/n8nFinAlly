import streamlit as st
import requests
import uuid
import pandas as pd
import plotly.express as px

# ================== –ö–û–ù–§–ò–ì ==================
N8N_URL = "https://finally.app.n8n.cloud/webhook/bf4dd093-bb02-472c-9454-7ab9af97bd1d"
TIMEOUT = (10, 25)  # (connect, read) ‚Äî –∫–æ—Ä–æ—á–µ, —á—Ç–æ–±—ã UI –Ω–µ "–∑–∞–º–∏—Ä–∞–ª"

# ================== –°–¢–†–ê–ù–ò–¶–ê ==================
st.set_page_config(page_title="–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π AI-–∞–≥–µ–Ω—Ç", layout="wide")

# ================== –°–ï–°–°–ò–Ø ==================
ss = st.session_state
if "session_id" not in ss:
    ss.session_id = str(uuid.uuid4())
if "messages" not in ss:
    ss.messages = [{"role": "assistant", "content": "–ö–æ–≥–æ –±—É–¥–µ–º —É–≤–æ–ª—å–Ω—è—Ç—å —Å–µ–≥–æ–¥–Ω—è?"}]
if "debug_mode" not in ss:
    ss.debug_mode = False
if "pending" not in ss:
    ss.pending = False
if "pending_prompt" not in ss:
    ss.pending_prompt = ""
if "fetch_in_progress" not in ss:
    ss.fetch_in_progress = False

# ================== –£–¢–ò–õ–ò–¢–´ ==================
def parse_n8n_response(response_json):
    """–ñ–¥—ë–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç: {'output': {'analytical_report': str, 'chart_data': null|{...}}}"""
    try:
        data = response_json[0] if isinstance(response_json, list) and response_json else response_json
        out = data.get("output", {}) if isinstance(data, dict) else {}
        text = out.get("analytical_report", "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞.")
        chart = out.get("chart_data", None)
        return {"text": text, "chart": chart}
    except Exception as e:
        return {"text": f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}\n–°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç: {response_json}", "chart": None}

def ask_agent(prompt: str, session_id: str, url: str, debug: bool) -> dict:
    headers = {"x-session-id": session_id}
    payload = {"prompt": prompt, "sessionId": session_id}
    try:
        r = requests.post(url, json=payload, headers=headers, timeout=TIMEOUT)
        r.raise_for_status()
        raw = r.json()
        if debug:
            st.sidebar.subheader("–°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç JSON")
            st.sidebar.json(raw)
        return parse_n8n_response(raw)
    except requests.exceptions.RequestException as e:
        return {"text": f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è/—Ç–∞–π–º–∞—É—Ç–∞: {e}", "chart": None}
    except Exception as e:
        return {"text": f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", "chart": None}

def display_chart(spec, debug: bool = False):
    """–†–µ–Ω–¥–µ—Ä —Ç–æ–ª—å–∫–æ bar_chart –∏ line_chart (PoC)."""
    try:
        if not spec:
            return
        data = spec.get("data")
        x_col = spec.get("x_column")
        y_col = spec.get("y_column")
        chart_type = (spec.get("type") or "bar_chart").lower()

        if not (data and x_col and y_col):
            st.error("–û—à–∏–±–∫–∞: –Ω–µ–ø–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ chart_data (–æ–∂–∏–¥–∞—é data/x_column/y_column).")
            return

        # data: list[dict] –∏–ª–∏ dict -> DataFrame
        df = pd.DataFrame([data]) if isinstance(data, dict) else pd.DataFrame(data)

        # –ø—Ä–∏–≤–æ–¥–∏–º Y –∫ —á–∏—Å–ª—É
        if y_col not in df.columns or x_col not in df.columns:
            st.error("–û—à–∏–±–∫–∞: —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–∞–Ω–Ω—ã—Ö.")
            return

        df[y_col] = (
            df[y_col]
            .astype(str)
            .str.replace("\u00A0", "", regex=False)  # NBSP
            .str.replace("%", "", regex=False)
            .str.replace(" ", "", regex=False)
            .str.replace(",", ".", regex=False)
        )
        df[y_col] = pd.to_numeric(df[y_col], errors="coerce")
        df = df.dropna(subset=[y_col])
        if df.empty:
            st.warning("–î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø—É—Å—Ç—ã–µ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏.")
            return

        category_order = df[x_col].tolist()

        if chart_type == "line_chart":
            fig = px.line(df, x=x_col, y=y_col, markers=True)
        else:  # bar_chart –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            fig = px.bar(df, x=x_col, y=y_col)

        fig.update_layout(
            height=420,
            margin=dict(l=10, r=10, t=10, b=10),
            xaxis=dict(categoryorder="array", categoryarray=category_order),
        )
        st.plotly_chart(fig, use_container_width=True)

        if debug:
            with st.expander("–î–∞–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∞"):
                st.dataframe(df)
    except Exception as e:
        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫: {e}")

def append_assistant(text: str, chart):
    ss.messages.append({"role": "assistant", "content": text, "chart": chart})

# ================== –°–ê–ô–î–ë–ê–† ==================
with st.sidebar:
    st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ê–≥–µ–Ω—Ç–∞")
    st.selectbox("–ú–æ–¥–µ–ª—å", ["Gemini (—á–µ—Ä–µ–∑ n8n)"], disabled=True)
    st.text_area("–°–∏—Å—Ç–µ–º–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", "–¢—ã ‚Äî –ø–æ–ª–µ–∑–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π AI-–∞–≥–µ–Ω—Ç...", height=100, disabled=True)
    st.slider("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", 0.0, 1.0, 0.7, disabled=True)

    with st.expander("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", expanded=False):
        url_input = st.text_input("Webhook URL", value=N8N_URL)
        ss.debug_mode = st.checkbox("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—ã—Ä–æ–π –æ—Ç–≤–µ—Ç JSON", value=ss.debug_mode)
        st.caption("–ö–æ–º–∞–Ω–¥—ã: `/clear` ‚Äî –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏.")
    st.caption(f"Session: {ss.session_id}")

    if ss.pending:
        if st.button("‚õî –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å"):
            ss.pending = False
            ss.pending_prompt = ""
            append_assistant("–ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.", None)
            st.rerun()

    if st.button("üßπ –ù–æ–≤—ã–π —á–∞—Ç / –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë"):
        ss.session_id = str(uuid.uuid4())
        ss.messages = [{"role": "assistant", "content": "–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞."}]
        ss.pending = False
        ss.pending_prompt = ""
        try:
            st.cache_data.clear()
            st.cache_resource.clear()
        except Exception:
            pass
        st.rerun()

# ================== LAZY FETCH (–±–µ–∑ ¬´—Ç–µ–Ω–∏¬ª, —É—Å—Ç–æ–π—á–∏–≤—ã–π) ==================
if ss.pending and ss.pending_prompt and not ss.fetch_in_progress:
    ss.fetch_in_progress = True
    try:
        with st.chat_message("assistant"):
            with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ..."):
                resp = ask_agent(ss.pending_prompt, ss.session_id, url_input, ss.debug_mode)
        append_assistant(resp.get("text", "_–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –∞–≥–µ–Ω—Ç–∞_"), resp.get("chart"))
    except Exception as e:
        append_assistant(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}", None)
    finally:
        ss.pending = False
        ss.pending_prompt = ""
        ss.fetch_in_progress = False
        st.rerun()

# ================== –†–ï–ù–î–ï–† –ò–°–¢–û–†–ò–ò ==================
for msg in ss.messages:
    with st.chat_message(msg["role"]):
        st.markdown(msg["content"])
        if msg.get("chart"):
            display_chart(msg["chart"], debug=ss.debug_mode)

# ================== –í–í–û–î –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ==================
prompt = st.chat_input("–í–∞—à –≤–æ–ø—Ä–æ—Å...")
if prompt:
    if prompt.strip() == "/clear":
        ss.messages = [{"role": "assistant", "content": "–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞."}]
        ss.pending = False
        ss.pending_prompt = ""
        st.rerun()
    else:
        ss.messages.append({"role": "user", "content": prompt})
        ss.pending = True
        ss.pending_prompt = prompt
        st.rerun()
