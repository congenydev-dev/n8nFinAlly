import re
import json
import time
import uuid
import requests
import pandas as pd
import streamlit as st

# ========= –ö–û–ù–§–ò–ì =========
N8N_URL = "https://finally.app.n8n.cloud/webhook/bf4dd093-bb02-472c-9454-7ab9af97bd1d"
TIMEOUT = (10, 240)           # connect=10s, read=240s (4 –º–∏–Ω)
SESSION_TTL_SEC = 3600        # –∞–≤—Ç–æ-—Ä–µ—Å–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ 1 —á–∞—Å –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

st.set_page_config(page_title="Analitical Agent", layout="wide")

# ========= –°–ï–°–°–ò–Ø/–†–ï–°–ï–¢ =========
def reset_chat():
    st.session_state.session_id = str(uuid.uuid4())
    st.session_state.messages = [{"role": "assistant", "content": "Whom are we firing today?"}]
    st.session_state.session_started_at = time.time()
    st.session_state.last_interaction = time.time()

if "session_id" not in st.session_state:
    reset_chat()
if "session_started_at" not in st.session_state:
    st.session_state.session_started_at = time.time()
if "last_interaction" not in st.session_state:
    st.session_state.last_interaction = time.time()

# –∞–≤—Ç–æ-—Ä–µ—Å–µ—Ç –ø–æ TTL
now = time.time()
if now - st.session_state.last_interaction > SESSION_TTL_SEC:
    reset_chat()
    st.toast("–ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥: —Å–µ—Å—Å–∏—è –±—ã–ª–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ > 1 —á–∞—Å–∞.", icon="üßπ")

# —Ä—É—á–Ω–æ–π —Ä–µ—Å–µ—Ç
st.sidebar.button("üßπ –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥", on_click=reset_chat)
st.sidebar.caption(f"–°–µ—Å—Å–∏—è: {st.session_state.session_id[:8]}‚Ä¶  ‚Ä¢ TTL: {SESSION_TTL_SEC//60} –º–∏–Ω")

# ========= –ü–ê–†–°–ï–† –û–¢–í–ï–¢–ê =========
def _try_parse_json_string(s: str):
    """–°–Ω—è—Ç—å ```json ... ``` –∏ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict/list –∏–ª–∏ None."""
    if not isinstance(s, str):
        return None
    txt = s.strip()
    if txt.startswith("```"):
        txt = re.sub(r"^```(?:json|JSON)?\s*", "", txt)
        txt = re.sub(r"\s*```$", "", txt)
    # –µ—Å–ª–∏ –µ—Å—Ç—å –ª–∏—à–Ω–∏–π –ø—Ä–µ—Ñ–∏–∫—Å ‚Äî –≤—ã—Ç–∞—â–∏–º –ø–µ—Ä–≤—É—é {...}
    if not txt.lstrip().startswith("{"):
        m = re.search(r"\{[\s\S]*\}\s*$", txt)
        if m:
            txt = m.group(0)
    try:
        return json.loads(txt)
    except Exception:
        return None

def _dig_for_output(obj):
    """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–π dict —Å –∫–ª—é—á–æ–º 'output' (—É—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ —Å JSON, –º–∞—Å—Å–∏–≤—ã –∏ –æ–±—ë—Ä—Ç–∫–∏)."""
    if isinstance(obj, str):
        parsed = _try_parse_json_string(obj)
        return _dig_for_output(parsed) if parsed is not None else None

    if isinstance(obj, dict):
        if "output" in obj and isinstance(obj["output"], str):
            parsed = _try_parse_json_string(obj["output"])
            if parsed is not None:
                return _dig_for_output(parsed)

        if "output" in obj and isinstance(obj["output"], dict):
            return obj["output"]

        for k in ("json", "data", "body", "result", "response"):
            if k in obj:
                got = _dig_for_output(obj[k])
                if got is not None:
                    return got

        for v in obj.values():
            got = _dig_for_output(v)
            if got is not None:
                return got
        return None

    if isinstance(obj, list):
        for el in obj:
            got = _dig_for_output(el)
            if got is not None:
                return got
    return None

def parse_n8n_response(response_json):
    """–ñ–¥—ë–º {'output': {'analytical_report': str, 'chart_data': null|{...}}} ‚Äî —Å –ª—é–±—ã–º–∏ –æ–±—ë—Ä—Ç–∫–∞–º–∏/–∫–æ–¥—Ñ–µ–Ω—Å–∞–º–∏."""
    try:
        out = _dig_for_output(response_json)
        if not isinstance(out, dict):
            return {"text": "–ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π 'output' –≤ –æ—Ç–≤–µ—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞.", "chart": None}

        # —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ª–∏—à–Ω–∏–µ nesting-–∏: {"output":{"output":{...}}}
        while isinstance(out, dict) and "output" in out and isinstance(out["output"], dict):
            out = out["output"]

        text = out.get("analytical_report", "–û—Ç—á—ë—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
        chart = out.get("chart_data", None)
        return {"text": text, "chart": chart}
    except Exception as e:
        return {"text": f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}\n–°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç: {response_json}", "chart": None}

# ========= –°–ï–¢–ï–í–û–ô –í–´–ó–û–í =========
def ask_agent(prompt: str) -> dict:
    headers = {"x-session-id": st.session_state.session_id}
    payload = {"prompt": prompt, "sessionId": st.session_state.session_id}
    try:
        r = requests.post(N8N_URL, json=payload, headers=headers, timeout=TIMEOUT)
        r.raise_for_status()
        return parse_n8n_response(r.json())
    except requests.exceptions.RequestException as e:
        return {"text": f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è/—Ç–∞–π–º–∞—É—Ç–∞: {e}", "chart": None}
    except Exception as e:
        return {"text": f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", "chart": None}

# ========= –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –ì–†–ê–§–ò–ö–û–í =========
def _to_numeric_series(s: pd.Series) -> pd.Series:
    return (
        s.astype(str)
         .str.replace("\u00A0", "", regex=False)  # NBSP
         .str.replace("%", "", regex=False)
         .str.replace(" ", "", regex=False)
         .str.replace(",", ".", regex=False)
         .pipe(pd.to_numeric, errors="coerce")
    )

def _norm_key(s: str) -> str:
    return str(s).replace("\u00A0", " ").strip().lower()

def show_chart(spec: dict):
    if not spec:
        return
    data = spec.get("data")
    x_key = spec.get("x_column")
    y_key = spec.get("y_column")            # –æ–¥–∏–Ω–æ—á–Ω–∞—è —Å–µ—Ä–∏—è
    y_keys = spec.get("y_columns")          # –º—É–ª—å—Ç–∏-—Å–µ—Ä–∏—è wide
    color_col = spec.get("color_column")    # –º—É–ª—å—Ç–∏-—Å–µ—Ä–∏—è long
    ctype = (spec.get("type") or "bar_chart").lower()
    width = spec.get("width", "stretch")
    height = spec.get("height", "content")

    if not (data and x_key and (y_key or y_keys)):
        st.error("chart_data –Ω–µ–ø–æ–ª–Ω—ã–π: –Ω—É–∂–Ω—ã data, x_column –∏ y_column|y_columns.")
        return

    # df
    df = pd.DataFrame([data]) if isinstance(data, dict) else pd.DataFrame(data)

    # –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —á–∏—Å–µ–ª
    def _clean_num(s: pd.Series) -> pd.Series:
        return (s.astype(str)
                 .str.replace("\u00A0","",regex=False)
                 .str.replace("%","",regex=False)
                 .str.replace(" ","",regex=False)
                 .str.replace(",",".",regex=False)
                 .pipe(pd.to_numeric, errors="coerce"))

    # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ X
    if x_key in df.columns:
        df = df.sort_values(x_key)

    if ctype == "line_chart":
        if y_keys:  # wide-format multi-series
            # —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏ —á–∏—Å–ª–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
            cols = [y for y in y_keys if y in df.columns]
            if not cols:
                st.error("–ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö y_columns –≤ –¥–∞–Ω–Ω—ã—Ö.")
                return
            for y in cols:
                df[y] = _clean_num(df[y])
            plot_df = df[[x_key] + cols].dropna(how="all", subset=cols)
            if plot_df.empty:
                st.info("–ì—Ä–∞—Ñ–∏–∫ –Ω–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω: –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –ø—É—Å—Ç—ã –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏.")
                return
            st.line_chart(plot_df, x=x_key, y=cols, width=width, height=height)
        else:
            # single-series (and possibly long-format if color_col is present)
            if color_col and color_col in df.columns:
                # long format: –Ω—É–∂–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å –≤ wide, —á—Ç–æ–±—ã –æ—Ç–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ª–∏–Ω–∏–π
                # pivot: index=x, columns=color, values=y
                df[y_key] = _clean_num(df[y_key])  # —Ç–∞–∫?
                pivot = df.pivot(index=x_key, columns=color_col, values=y_key).reset_index()
                # Streamlit line_chart –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ y
                y_cols = [c for c in pivot.columns if c != x_key]
                st.line_chart(pivot, x=x_key, y=y_cols, width=width, height=height)
            else:
                # single line
                df[y_key] = _clean_num(df[y_key])
                plot_df = df[[x_key, y_key]].dropna(subset=[y_key])
                if plot_df.empty:
                    st.info("–ì—Ä–∞—Ñ–∏–∫ –Ω–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω: –∑–Ω–∞—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫–∏ –ø—É—Å—Ç—ã –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏.")
                    return
                st.line_chart(plot_df, x=x_key, y=y_key, width=width, height=height)
    else:
        # –±–∞—Ä-—á–∞—Ä—Ç –±–µ–∑ deprecated use_container_width
        st.bar_chart(df, x=x_key, y=y_key or y_keys, width=width, height=height)

# ========= –†–ï–ù–î–ï–† –ò–°–¢–û–†–ò–ò =========
for msg in st.session_state.messages:
    with st.chat_message(msg["role"]):
        st.markdown(msg["content"])
        if msg.get("chart"):
            show_chart(msg["chart"])

# ========= –í–í–û–î –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø / –û–¢–í–ï–¢ =========
if prompt := st.chat_input("–í–∞—à –≤–æ–ø—Ä–æ—Å..."):
    st.session_state.last_interaction = time.time()

    # 1) –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–ø–∏—Å–∞—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏—é
    with st.chat_message("user"):
        st.markdown(prompt)
    st.session_state.messages.append({"role": "user", "content": prompt})

    # 2) –∑–∞–ø—Ä–æ—Å –∫ n8n
    resp = ask_agent(prompt)
    text = resp.get("text", "_–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –∞–≥–µ–Ω—Ç–∞_")
    chart = resp.get("chart")

    # 3) –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é –∏ –ø–µ—Ä–µ-—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å –†–û–í–ù–û –æ–¥–∏–Ω —Ä–∞–∑
    st.session_state.messages.append({"role": "assistant", "content": text, "chart": chart})
    st.rerun()
