import streamlit as st
import requests
import uuid
import pandas as pd
import plotly.express as px

# ================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ==================
N8N_URL = "https://finally.app.n8n.cloud/webhook/bf4dd093-bb02-472c-9454-7ab9af97bd1d"
# TIMEOUT = (connect_timeout, read_timeout)
TIMEOUT = (10, 120)

# ================== –ù–ê–°–¢–†–û–ô–ö–ê –°–¢–†–ê–ù–ò–¶–´ ==================
st.set_page_config(page_title="–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π AI-–∞–≥–µ–Ω—Ç", layout="wide")

# ================== –°–ï–°–°–ò–Ø ==================
if "session_id" not in st.session_state:
    st.session_state.session_id = str(uuid.uuid4())
if "messages" not in st.session_state:
    st.session_state.messages = [{"role": "assistant", "content": "–ö–æ–≥–æ –±—É–¥–µ–º —É–≤–æ–ª—å–Ω—è—Ç—å —Å–µ–≥–æ–¥–Ω—è?"}]

# ================== –§–£–ù–ö–¶–ò–ò ==================
def parse_n8n_response(response_json: list | dict) -> dict:
    """–î–æ—Å—Ç–∞—ë–º —Ç–µ–∫—Å—Ç –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥—Ä–∞—Ñ–∏–∫–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞ n8n."""
    try:
        data = response_json[0] if isinstance(response_json, list) and response_json else response_json
        output_data = data.get("output", {}) if isinstance(data, dict) else {}
        text = output_data.get("analytical_report", "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞.")
        chart = output_data.get("chart_data", None)
        return {"text": text, "chart": chart}
    except Exception as e:
        return {
            "text": f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ—Ç–≤–µ—Ç–∞: {e}\n–°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç: {str(response_json)}",
            "chart": None,
        }

def ask_agent(prompt: str, session_id: str, url: str, debug: bool) -> dict:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ n8n –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç."""
    headers = {"x-session-id": session_id}
    payload = {"prompt": prompt, "sessionId": session_id}
    try:
        response = requests.post(url, json=payload, headers=headers, timeout=TIMEOUT)
        response.raise_for_status()
        raw_response = response.json()
        if debug:
            st.sidebar.subheader("–°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç JSON")
            st.sidebar.json(raw_response)
        return parse_n8n_response(raw_response)
    except requests.exceptions.RequestException as e:
        return {"text": f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–ª–∏ —Ç–∞–π–º–∞—É—Ç–∞: {e}", "chart": None}
    except Exception as e:
        return {"text": f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", "chart": None}

def display_chart(chart_info, debug: bool = False):
    """–†–µ–Ω–¥–µ—Ä –æ–¥–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ —á–µ—Ä–µ–∑ Plotly. –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–∏–ø–æ–≤:
       bar_chart, line_chart, area_chart, scatter, pie, histogram, box."""
    try:
        if not chart_info:
            return

        data = chart_info.get("data")
        x_col = chart_info.get("x_column")
        y_col = chart_info.get("y_column")
        chart_type = (chart_info.get("type") or "bar_chart").lower()

        if not (data and x_col and y_col):
            st.error("–û—à–∏–±–∫–∞: –Ω–µ–ø–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ chart_data (–æ–∂–∏–¥–∞—é data/x_column/y_column).")
            return

        # data –º–æ–∂–µ—Ç –±—ã—Ç—å list[dict] –∏–ª–∏ dict
        df = pd.DataFrame([data]) if isinstance(data, dict) else pd.DataFrame(data)

        # y_column: —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ (–Ω–∞ –±—É–¥—É—â–µ–µ –¥–ª—è –º—É–ª—å—Ç–∏—Å–µ—Ä–∏–π)
        y_cols = [y_col] if isinstance(y_col, str) else list(y_col)

        # –ø—Ä–∏–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã (—Ç–æ–ª—å–∫–æ Y) –∫ —á–∏—Å–ª—É
        for yc in y_cols:
            if yc in df.columns:
                df[yc] = (
                    df[yc].astype(str)
                    .str.replace("\u00A0", "", regex=False)  # NBSP
                    .str.replace("%", "", regex=False)
                    .str.replace(" ", "", regex=False)
                    .str.replace(",", ".", regex=False)
                )
                df[yc] = pd.to_numeric(df[yc], errors="coerce")

        # –ø–æ—Ä—è–¥–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫–∞–∫ –≤ –¥–∞–Ω–Ω—ã—Ö
        category_order = df[x_col].tolist() if x_col in df.columns else None

        # === –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø–æ —Ç–∏–ø—É ===
        if chart_type == "line_chart":
            if len(y_cols) == 1:
                fig = px.line(df, x=x_col, y=y_cols[0], markers=True)
            else:
                long_df = df[[x_col] + [c for c in y_cols if c in df.columns]].melt(
                    id_vars=[x_col], var_name="series", value_name="value"
                )
                fig = px.line(long_df, x=x_col, y="value", color="series", markers=True)

        elif chart_type == "area_chart":
            if len(y_cols) == 1:
                fig = px.area(df, x=x_col, y=y_cols[0])
            else:
                long_df = df[[x_col] + [c for c in y_cols if c in df.columns]].melt(
                    id_vars=[x_col], var_name="series", value_name="value"
                )
                fig = px.area(long_df, x=x_col, y="value", color="series")

        elif chart_type == "scatter":
            yc = y_cols[0]
            fig = px.scatter(df, x=x_col, y=yc)

        elif chart_type == "pie":
            yc = y_cols[0]
            fig = px.pie(df, names=x_col, values=yc, hole=0.0)

        elif chart_type == "histogram":
            yc = y_cols[0]
            fig = px.histogram(df, x=yc)

        elif chart_type == "box":
            yc = y_cols[0]
            if x_col in df.columns:
                fig = px.box(df, x=x_col, y=yc)
            else:
                fig = px.box(df, y=yc)

        else:  # bar_chart –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if len(y_cols) == 1:
                fig = px.bar(df, x=x_col, y=y_cols[0])
            else:
                long_df = df[[x_col] + [c for c in y_cols if c in df.columns]].melt(
                    id_vars=[x_col], var_name="series", value_name="value"
                )
                barmode = "stack" if chart_info.get("stacked") else "group"
                fig = px.bar(long_df, x=x_col, y="value", color="series", barmode=barmode)

        fig.update_layout(
            height=420,
            margin=dict(l=10, r=10, t=10, b=10),
            xaxis=dict(categoryorder="array", categoryarray=category_order) if category_order else dict(),
        )
        st.plotly_chart(fig, use_container_width=True)

        if debug:
            with st.expander("–î–∞–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∞"):
                st.dataframe(df)
    except Exception as e:
        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫: {e}")

# ================== UI –ë–û–ö–û–í–ê–Ø –ü–ê–ù–ï–õ–¨ ==================
with st.sidebar:
    st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ê–≥–µ–Ω—Ç–∞")
    st.selectbox("–ú–æ–¥–µ–ª—å", ["Gemini (—á–µ—Ä–µ–∑ n8n)"], disabled=True)
    st.text_area("–°–∏—Å—Ç–µ–º–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", "–¢—ã ‚Äî –ø–æ–ª–µ–∑–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π AI-–∞–≥–µ–Ω—Ç...", height=100, disabled=True)
    st.slider("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", 0.0, 1.0, 0.7, disabled=True)

    with st.expander("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", expanded=False):
        url_input = st.text_input("Webhook URL", value=N8N_URL)
        debug_mode = st.checkbox("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—ã—Ä–æ–π –æ—Ç–≤–µ—Ç JSON", value=False)
        st.caption("–ö–æ–º–∞–Ω–¥—ã –≤ —á–∞—Ç–µ: `/clear` ‚Äî –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏.")

    st.caption(f"Session: {st.session_state.session_id}")

    # === –ö–ù–û–ü–ö–ê –ü–û–õ–ù–û–ô –û–ß–ò–°–¢–ö–ò –°–ï–°–°–ò–ò ===
    if st.button("üßπ –ù–æ–≤—ã–π —á–∞—Ç / –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë"):
        st.session_state.session_id = str(uuid.uuid4())
        st.session_state.messages = [{"role": "assistant", "content": "–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞."}]
        try:
            st.cache_data.clear()
            st.cache_resource.clear()
        except Exception:
            pass
        st.rerun()

# ================== LAZY FETCH –û–¢–í–ï–¢–ê (—á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ ¬´—Ç–µ–Ω–∏¬ª) ==================
def need_reply() -> bool:
    if not st.session_state.messages:
        return False
    return st.session_state.messages[-1]["role"] == "user"

if need_reply():
    with st.chat_message("assistant"):
        with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ..."):
            last_user_prompt = st.session_state.messages[-1]["content"]
            response_data = ask_agent(
                last_user_prompt,
                st.session_state.session_id,
                url_input,
                debug_mode,
            )
    st.session_state.messages.append({
        "role": "assistant",
        "content": response_data.get("text", "_–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –∞–≥–µ–Ω—Ç–∞_"),
        "chart": response_data.get("chart")
    })
    st.rerun()

# ================== –†–ï–ù–î–ï–† –ò–°–¢–û–†–ò–ò ==================
for msg in st.session_state.messages:
    with st.chat_message(msg["role"]):
        st.markdown(msg["content"])
        if msg.get("chart"):
            display_chart(msg["chart"], debug=debug_mode)

# ================== –û–ë–†–ê–ë–û–¢–ö–ê –ù–û–í–û–ì–û –ó–ê–ü–†–û–°–ê ==================
prompt = st.chat_input("–í–∞—à –≤–æ–ø—Ä–æ—Å...")
if prompt:
    if prompt.strip() == "/clear":
        st.session_state.messages = [{"role": "assistant", "content": "–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞."}]
        st.rerun()
    else:
        # –¢–æ–ª—å–∫–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º ‚Äî –æ—Ç–≤–µ—Ç –ø–æ–¥—Ç—è–Ω–µ—Ç—Å—è –≤ lazy fetch
        st.session_state.messages.append({"role": "user", "content": prompt})
        st.rerun()
