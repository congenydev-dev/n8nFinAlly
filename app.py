import streamlit as st
import requests
import uuid
import pandas as pd
import plotly.express as px

# ================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ==================
N8N_URL = "https://finally.app.n8n.cloud/webhook/bf4dd093-bb02-472c-9454-7ab9af97bd1d"
# TIMEOUT = (connect_timeout, read_timeout)
TIMEOUT = (10, 120)

# ================== –ù–ê–°–¢–†–û–ô–ö–ê –°–¢–†–ê–ù–ò–¶–´ ==================
st.set_page_config(page_title="–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π AI-–∞–≥–µ–Ω—Ç", layout="wide")

# ================== –°–ï–°–°–ò–Ø ==================
if "session_id" not in st.session_state:
    st.session_state.session_id = str(uuid.uuid4())

# ================== –§–£–ù–ö–¶–ò–ò ==================
def parse_n8n_response(response_json: list | dict) -> dict:
    """–î–æ—Å—Ç–∞—ë–º —Ç–µ–∫—Å—Ç –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥—Ä–∞—Ñ–∏–∫–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞ n8n."""
    try:
        data = response_json[0] if isinstance(response_json, list) and response_json else response_json
        output_data = data.get("output", {}) if isinstance(data, dict) else {}
        text = output_data.get("analytical_report", "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞.")
        chart = output_data.get("chart_data", None)
        return {"text": text, "chart": chart}
    except Exception as e:
        return {
            "text": f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ—Ç–≤–µ—Ç–∞: {e}\n–°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç: {str(response_json)}",
            "chart": None,
        }

def ask_agent(prompt: str, session_id: str, url: str, debug: bool) -> dict:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ n8n –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç."""
    headers = {"x-session-id": session_id}
    payload = {"prompt": prompt, "sessionId": session_id}
    try:
        response = requests.post(url, json=payload, headers=headers, timeout=TIMEOUT)
        response.raise_for_status()
        raw_response = response.json()
        if debug:
            st.sidebar.subheader("–°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç JSON")
            st.sidebar.json(raw_response)
        return parse_n8n_response(raw_response)
    except requests.exceptions.RequestException as e:
        return {"text": f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–ª–∏ —Ç–∞–π–º–∞—É—Ç–∞: {e}", "chart": None}
    except Exception as e:
        return {"text": f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", "chart": None}

def display_chart(chart_info, debug: bool = False):
    """–†–µ–Ω–¥–µ—Ä –≥—Ä–∞—Ñ–∏–∫–∞ —á–µ—Ä–µ–∑ Plotly, —É—Å—Ç–æ–π—á–∏–≤ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω–æ–π X –∏ —Ä–∞–∑–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∞–º –¥–∞–Ω–Ω—ã—Ö."""
    try:
        if not chart_info:
            return

        data = chart_info.get("data")
        x_col = chart_info.get("x_column")
        y_col = chart_info.get("y_column")
        chart_type = (chart_info.get("type") or "").lower()

        if not (data and x_col and y_col):
            st.error("–û—à–∏–±–∫–∞: –Ω–µ–ø–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ chart_data (–æ–∂–∏–¥–∞—é data/x_column/y_column).")
            return

        # data –º–æ–∂–µ—Ç –±—ã—Ç—å list[dict] –∏–ª–∏ dict
        if isinstance(data, dict):
            df = pd.DataFrame([data])
        else:
            df = pd.DataFrame(data)

        if x_col not in df.columns or y_col not in df.columns:
            st.error("–û—à–∏–±–∫–∞: —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–∞–Ω–Ω—ã—Ö.")
            return

        # –ß–∏—Å—Ç–∏–º –∏ –ø—Ä–∏–≤–æ–¥–∏–º Y –∫ —á–∏—Å–ª—É
        df[y_col] = (
            df[y_col].astype(str)
            .str.replace(" ", "", regex=False)
            .str.replace(",", ".", regex=False)
        )
        df[y_col] = pd.to_numeric(df[y_col], errors="coerce")
        df = df.dropna(subset=[y_col])

        if df.empty:
            st.warning("–î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø—É—Å—Ç—ã–µ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫–∞–∫ –≤ –¥–∞–Ω–Ω—ã—Ö
        category_order = df[x_col].tolist()

        if chart_type == "line_chart":
            fig = px.line(df, x=x_col, y=y_col, markers=True)
        else:  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Ç–æ–ª–±—á–∞—Ç–∞—è
            fig = px.bar(df, x=x_col, y=y_col)

        fig.update_layout(
            height=420,
            margin=dict(l=10, r=10, t=10, b=10),
            xaxis=dict(categoryorder="array", categoryarray=category_order),
        )

        st.plotly_chart(fig, use_container_width=True)

        if debug:
            with st.expander("–î–∞–Ω–Ω—ã–µ, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –≤ –≥—Ä–∞—Ñ–∏–∫"):
                st.dataframe(df)
    except Exception as e:
        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫: {e}")

# ================== UI –ë–û–ö–û–í–ê–Ø –ü–ê–ù–ï–õ–¨ ==================
with st.sidebar:
    st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ê–≥–µ–Ω—Ç–∞")
    st.selectbox("–ú–æ–¥–µ–ª—å", ["Gemini (—á–µ—Ä–µ–∑ n8n)"], disabled=True)
    st.text_area("–°–∏—Å—Ç–µ–º–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", "–¢—ã ‚Äî –ø–æ–ª–µ–∑–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π AI-–∞–≥–µ–Ω—Ç...", height=100, disabled=True)
    st.slider("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", 0.0, 1.0, 0.7, disabled=True)

    with st.expander("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", expanded=False):
        url_input = st.text_input("Webhook URL", value=N8N_URL)
        debug_mode = st.checkbox("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—ã—Ä–æ–π –æ—Ç–≤–µ—Ç JSON", value=False)
        st.caption("–ö–æ–º–∞–Ω–¥—ã –≤ —á–∞—Ç–µ: `/clear` ‚Äî –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏.")

    st.caption(f"Session: {st.session_state.session_id}")

    # === –ö–ù–û–ü–ö–ê –ü–û–õ–ù–û–ô –û–ß–ò–°–¢–ö–ò –°–ï–°–°–ò–ò ===
    if st.button("üßπ –ù–æ–≤—ã–π —á–∞—Ç / –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë"):
        st.session_state.session_id = str(uuid.uuid4())  # –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ n8n
        st.session_state.messages = [{"role": "assistant", "content": "–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞."}]
        try:
            st.cache_data.clear()
            st.cache_resource.clear()
        except Exception:
            pass
        st.rerun()  # –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ (–±–µ–∑ F5)

# ================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò –ò–°–¢–û–†–ò–Ø –ß–ê–¢–ê ==================
if "messages" not in st.session_state:
    st.session_state.messages = [{"role": "assistant", "content": "–ö–æ–≥–æ –±—É–¥–µ–º —É–≤–æ–ª—å–Ω—è—Ç—å —Å–µ–≥–æ–¥–Ω—è?"}]

for msg in st.session_state.messages:
    with st.chat_message(msg["role"]):
        st.markdown(msg["content"])
        if "chart" in msg and msg.get("chart"):
            display_chart(msg["chart"], debug=debug_mode)

# ================== –û–ë–†–ê–ë–û–¢–ö–ê –ù–û–í–û–ì–û –ó–ê–ü–†–û–°–ê ==================
if prompt := st.chat_input("–í–∞—à –≤–æ–ø—Ä–æ—Å..."):
    if prompt.strip() == "/clear":
        st.session_state.messages = [{"role": "assistant", "content": "–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞."}]
        st.rerun()
    else:
        st.session_state.messages.append({"role": "user", "content": prompt})
        st.chat_message("user").markdown(prompt)

        with st.chat_message("assistant"):
            with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ..."):
                response_data = ask_agent(
                    prompt,
                    st.session_state.session_id,
                    url_input,
                    debug_mode
                )

            response_text = response_data.get("text", "_–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –∞–≥–µ–Ω—Ç–∞_")
            chart_data = response_data.get("chart")

            st.markdown(response_text)
            if chart_data:
                display_chart(chart_data, debug=debug_mode)

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–æ–∫
        st.session_state.messages.append({
            "role": "assistant",
            "content": response_text,
            "chart": chart_data
        })
